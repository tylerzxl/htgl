{"version":3,"sources":["webpack:///./node_modules/@mdf/cube/src/bizmodel/option.ts"],"names":["loadData","save","abandon","option","billNo","viewmodel","params","beforeAct","afterAct","proxy","cb","rest","DynamicProxy","create","getData","url","getParams","subId","method","options","uniform","beforeDt","orgId","get","getValue","subid","optionId","data","err","res","selectOrg","selectOrg_name","setReadOnly","collectData","inputData","attr","push","name","value","undefined","postData","newData","utils","alert","oldData","Object","assign","confirm","afterActData","getOriginalData","a","init","callback","self","this","getMeta","type","result","JSON","stringify","console","error","loadingControl","end","requireInner","vmurl","defaultParams","viewmeta","cBillNo","cSubId","foreignKey","vm","Function","viewmodels","vmName","setViewMeta","extend","on","cName","initData","do","window","yya","act","action","optionExtend","extendConfig","optionExtendConfig","log","optionAction","load","namespace","biz","common"],"mappings":"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","file":"public/javascripts/9.bundle.js?_=d566ad53-de75-49ba-965f-44adb4dd2a09","sourcesContent":["import * as common from './common';\nconst option = (function () {\n  const loadData = function (billNo, viewmodel, params, beforeAct, afterAct) {\n    const proxy = cb.rest.DynamicProxy.create({\n      getData: {\n        url: '/option.do/' + viewmodel.getParams().subId,\n        method: 'GET',\n        options: {\n          uniform: false\n        }\n      }\n    });\n    const beforeDt = {\n      orgId: viewmodel.get('selectOrg') && viewmodel.get('selectOrg').getValue(), // cb.rest.AppContext.orgId,\n      subid: viewmodel.getParams().subid,\n      optionId: viewmodel.getParams().optionId\n    }\n    const beforeActData = {\n      params: params,\n      data: beforeDt\n    }\n    beforeAct(beforeActData, function () {\n      proxy.getData(beforeDt, function (err, res) {\n        if (!err) {\n          if (viewmodel.get('selectOrg')) {\n            res.selectOrg = viewmodel.get('selectOrg').getValue();\n          }\n          if (viewmodel.get('selectOrg_name')) {\n            res.selectOrg_name = viewmodel.get('selectOrg_name').getValue();\n          }\n          viewmodel.setReadOnly(false);\n          viewmodel.loadData(res);\n        }\n        const afterActData = {\n          err: err,\n          res: res\n        }\n        afterAct(afterActData, common.afterAct)\n      });\n    })\n  };\n  const save = function (billNo, viewmodel, params, beforeAct, afterAct) {\n    const data = viewmodel.collectData();\n    if (!data) {\n      cb.utils.alert('未作任何修改');\n      return;\n    }\n    // data[\"_status\"] = cb.models.DataStates.Update;\n    const inputData = [];\n\n    for (const attr in data) {\n      inputData.push({ name: attr, value: data[attr], optionId: viewmodel.getParams().optionId })\n    }\n    if (viewmodel.get('selectOrg') !== undefined) {\n      if (!viewmodel.get('selectOrg').getValue()) {\n        cb.utils.alert('请选择组织！', 'error');\n        return\n      }\n    }\n\n    const postData = {\n      // optionId: viewmodel.getParams().optionId,\n      // subid: viewmodel.getParams().subId,\n      orgId: viewmodel.get('selectOrg') && viewmodel.get('selectOrg').getValue(),\n      // data: data\n      data: inputData\n    };\n\n    const beforeActData = {\n      params: params,\n      data: postData\n    }\n    beforeAct(beforeActData, function () {\n      const callback = function (err, res) {\n        let newData = res;\n        if (!err) {\n          cb.utils.alert('保存成功');\n          const oldData = viewmodel.collectData(true);\n          newData = Object.assign({}, oldData, res);\n          viewmodel.loadData(newData);\n        }\n        const afterActData = {\n          err: err,\n          res: newData\n        }\n        afterAct(afterActData, common.afterAct)\n      }\n      common.doProxy(params, callback, postData);\n    });\n  };\n  const abandon = function (billNo, viewmodel, params, beforeAct, afterAct) {\n    const data = viewmodel.collectData();\n    const beforeActData = {\n      params: params\n    }\n    beforeAct(beforeActData, function () {\n      if (data) {\n        cb.utils.confirm('确定要放弃么', function () {\n          // viewmodel.communication({ type: 'close' });\n          // return;\n          const afterActData = {\n            res: viewmodel.getOriginalData()\n          }\n          viewmodel.loadData(viewmodel.getOriginalData());\n          afterAct(afterActData, common.afterAct)\n        }, function (a) {\n          a();\n          const afterActData = {\n            res: data\n          }\n          // viewmodel.loadData(data);\n          afterAct(afterActData, common.afterAct)\n        });\n      } else {\n        // viewmodel.communication({ type: 'close' });\n        afterAct(viewmodel.getOriginalData(), common.afterAct)\n      }\n    })\n  };\n  return {\n    init: function (billNo, params, callback) {\n      const self = this;\n      const proxy = cb.rest.DynamicProxy.create({\n        getMeta: {\n          url: '/meta',\n          method: 'POST',\n          options: {\n            uniform: false\n          }\n        }\n      });\n      const postData = Object.assign({}, params, {\n        type: 'option',\n        optionId: billNo\n      })\n      proxy.getMeta(postData, function (err, result) {\n        if (err) {\n          cb.utils.alert(JSON.stringify(err), 'error');\n          console.error(err);\n          cb.utils.loadingControl.end();\n          return;\n        }\n        // let func = new Function(result.vm);\n        // func();\n        cb.requireInner(result.vmurl, function () {\n          const defaultParams = {\n            optionId: billNo,\n            billNo: result.viewmeta.cBillNo,\n            subId: result.viewmeta.cSubId,\n            foreignKey: result.viewmeta.foreignKey\n          };\n          if (!result.vmurl && result.vm)\n            new Function(result.vm)();\n          const vm = new cb.viewmodels[result.viewmeta.vmName]();\n          vm.setViewMeta(result.viewmeta);\n          cb.utils.extend(true, vm.getParams(), defaultParams, params);\n          common.storeVmInstance(billNo, vm);\n          vm.on('extendReady', function () {\n            callback(vm, result.viewmeta, result.viewmeta.cName);\n          });\n          vm.initData();\n          if (vm.get('selectOrg_name')) {\n            vm.get('selectOrg_name').on('afterValueChange', function () {\n              // loadData(vm.getOriginalData())\n              self.do('load', vm)\n            })\n          }\n\n          window.yya = vm\n          self.do('load', vm);\n        })\n      });\n    },\n    do: function (act, viewmodel, params) {\n      common.todo(this, act, viewmodel, params)\n    },\n    action: function () {\n      // 增加扩展机制，没有配置传入容错处理 yueming\n      let optionExtend = {}\n      try {\n        optionExtend = cb.extendConfig.optionExtendConfig;\n      } catch (error) {\n        console.log(error);\n        optionExtend = {};\n      }\n      const optionAction = {\n        load: loadData,\n        save: save,\n        abandon: abandon\n      }\n      return Object.assign(optionAction, optionExtend);\n    }\n  }\n}())\n\ncb.namespace('biz.common');\ncb.biz.common.option = option;\n\nexport default option\n"],"sourceRoot":""}